<policies>
    <inbound>
        <base />
        <set-variable name="clientId" value="@{ 
            string appId = "NOAUTH";
            String version="1.0";
            string authHeader = context.Request.Headers.GetValueOrDefault("Authorization", "");
            if (authHeader?.Length > 0)
            {
                  string[] authHeaderParts = authHeader.Split(' ');
                  if (authHeaderParts?.Length == 2 && authHeaderParts[0].Equals("Bearer", StringComparison.InvariantCultureIgnoreCase))
                  {
                        Jwt jwt;
                         if (authHeaderParts[1].TryParseJwt(out jwt))
                         {
                             version=jwt.Claims.GetValueOrDefault("ver", "1.0");
                             if(version=="1.0")
                             {   
                                appId = jwt.Claims.GetValueOrDefault("appid", "NOAPPID");
                             }
                             if(version=="2.0")
                             {
                                appId = jwt.Claims.GetValueOrDefault("azp", "NOAPPID");
                             }

                             appId=appId;  
                         } 
                   }            
             }
                 return appId;
             }" />
        <set-variable name="OauthToken" value="@{
                string iss = "NOISS";
                string authHeader = context.Request.Headers.GetValueOrDefault("Authorization", "");

                if (authHeader?.Length > 0)
                { 
                    string[] authHeaderParts = authHeader.Split(' ');

                    if (authHeaderParts?.Length == 2 && authHeaderParts[0].Equals("Bearer", StringComparison.InvariantCultureIgnoreCase))
                    {
                        Jwt jwt;
                        if (authHeaderParts[1].TryParseJwt(out jwt))
                        {

                            iss = authHeaderParts[1];

                        }
                    }
                }

                return iss;
            }" />
        <trace source="JWT Token" severity="information">
            <message>@(String.Format("{0} | {1}", context.Api.Name, context.Operation.Name))</message>
            <metadata name="IncommingOauthToken" value="@((string)context.Variables["OauthToken"])" />
        </trace>
        <cache-lookup-value key="@((string)context.Variables["clientId"] + "_HapiToken")" variable-name="hapitoken" caching-type="external" />
        <cache-lookup-value key="@((string)context.Variables["clientId"] + "_GoogleIdToken")" variable-name="googleidtoken" caching-type="external" />
        <choose>
            <when condition="@(context.Variables.ContainsKey("hapitoken") && context.Variables.ContainsKey("googleidtoken") && System.String.Equals((string)context.Variables["hapitoken"],(string)context.Variables["OauthToken"]))">
                <set-header name="Authorization" exists-action="override">
                    <value>@("Bearer " + (string)context.Variables["googleidtoken"])</value>
                </set-header>
            </when>
            <otherwise>
                <cache-store-value key="@((string)context.Variables["clientId"] + "_HapiToken")" value="@((string)context.Variables["OauthToken"])" duration="30" caching-type="external" />
                <send-request mode="new" response-variable-name="tokenstate" timeout="20" ignore-error="true">
                    <set-url>https://sts.googleapis.com/v1/token</set-url>
                    <set-method>POST</set-method>
                    <set-header name="Content-Type" exists-action="override">
                        <value>text/json</value>
                    </set-header>
                    <set-body template="liquid">{"audience":"//iam.googleapis.com/projects/491993326620/locations/global/workloadIdentityPools/azure-hm-ie/providers/azure-h-m-tenant","grantType": "urn:ietf:params:oauth:grant-type:token-exchange","requestedTokenType" : "urn:ietf:params:oauth:token-type:access_token","scope"              : "https://www.googleapis.com/auth/cloud-platform","subjectToken"       : "{{context.Variables["OauthToken"]}}","subjectTokenType"   : "urn:ietf:params:oauth:token-type:jwt"}</set-body>
                </send-request>
                <send-request mode="new" response-variable-name="tokenstate1" timeout="20" ignore-error="true">
                    <set-url>https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/ie-hapi-sa@hmgroup-techmoved-nprod.iam.gserviceaccount.com:generateIdToken</set-url>
                    <set-method>POST</set-method>
                    <set-header name="Content-Type" exists-action="override">
                        <value>text/json</value>
                    </set-header>
                    <set-header name="Authorization" exists-action="append">
                        <value>@("Bearer " + (String)((IResponse)context.Variables["tokenstate"]).Body.As<JObject>()["access_token"])</value>
                    </set-header>
                    <set-body>{"audience":"https://hello-dbu76uzx7q-uc.a.run.app"}</set-body>
                </send-request>
                <set-variable name="GoogleIdTokenCache" value="@((String)((IResponse)context.Variables["tokenstate1"]).Body.As<JObject>()["token"])" />
                <cache-store-value key="@((string)context.Variables["clientId"] + "_GoogleIdToken")" value="@((string)context.Variables["GoogleIdTokenCache"])" duration="30" caching-type="external" />
                <set-header name="Authorization" exists-action="override">
                    <value>@("Bearer " + (string)context.Variables["GoogleIdTokenCache"])</value>
                </set-header>
            </otherwise>
        </choose>
        <set-backend-service base-url="https://hello-dbu76uzx7q-uc.a.run.app" />
        <rewrite-uri template="/" copy-unmatched-params="false" />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>